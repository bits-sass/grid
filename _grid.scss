/* ==========================================================================
   Grid
   ========================================================================== */

/**
 * Core grid component
 *
 * Make use of dimension utilities, or components that extend 'grid' in order
 * to apply particular widths to cells.
 *
 * Make use of space utilities in order to apply gutter between cells.
 *
 * Example HTML:
 *
 * <div class="Grid">
 *   <div class="Grid-cell u-size1of2"></div>
 *   <div class="Grid-cell u-size1of2"></div>
 *   <div class="Grid-cell u-size1of3"></div>
 *   <div class="Grid-cell u-size1of3"></div>
 * </div>
 *
 * <div class="Grid Grid--center">
 *   <div class="Grid-cell u-size1of3"></div>
 *   <div class="Grid-cell u-size1of3"></div>
 * </div>
 */

/* Variables
   ========================================================================== */

/**
 * Bits.sass components namespace
 */

$bits-components-ns: 'bits-' !default;

/**
 * A list of generated columns
 */

$bits-grid-columns: (2 3 4) !default;

/* Component
   ========================================================================== */

/**
 * Must only contain `Grid` or `Grid-cell` components as children.
 *
 * 1. Ensure consistent default alignment.
 * 2. Protect against WebKit bug with optimizelegibility.
 * 3. Remove inter-unit whitespace that appears between `inline-block` child
 *    elements. Work for all non-monospace font-families.  If you're using a
 *    monospace base font, you will need to set the `Grid` font-family to
 *   `sans-serif` and then redeclare the monospace font on the `Grid-cell`
 *    objects.
 */

.#{$bits-components-ns}Grid {
  display: block;
  padding: 0;
  margin: 0;

  text-align: left; /* 1 */
  text-rendering: optimizespeed; /* 2 */
  letter-spacing: -0.31em; /* 3 */
}

/* Opera hack */

.opera:-o-prefocus,
.#{$bits-components-ns}Grid {
  word-spacing: -0.43em; /* 3 */
}

/* Descendants
   ========================================================================== */

/**
 * No explicit width by default. Rely on combining `Grid-cell` with a dimension
 * utility or component that extends 'grid'.
 *
 * 1. Fundamentals of the non-float grid layout mechanism.
 * 2. Controls vertical positioning of units.
 * 3. Keeps content correctly aligned with the grid direction.
 * 4. Reset text defaults.
 */

.#{$bits-components-ns}Grid-cell {
  -moz-box-sizing: border-box;
       box-sizing: border-box;
  display: inline-block; /* 1 */
  margin: 0;
  padding: 0;
  width: 100%;
  vertical-align: top; /* 2 */

  text-align: left; /* 3 */
  text-rendering: auto; /* 4 */
  letter-spacing: normal; /* 4 */
  word-spacing: normal; /* 4 */
}

/* Component modifiers
   ========================================================================== */

/**
 * Horizontally center all grid units
 *
 * Allows for automatic unit centering irrespective of the number of
 * units in the grid.
 */

.#{$bits-components-ns}Grid--center {
  text-align: center;
}

/**
 * Vertically center all grid units
 */

.#{$bits-components-ns}Grid--middle {
  > .#{$bits-components-ns}Grid-cell {
    vertical-align: middle;
  }
}

/**
 * Vertically align all grid units to bottom
 */

.#{$bits-components-ns}Grid--bottom {
  > .#{$bits-components-ns}Grid-cell {
    vertical-align: bottom;
  }
}

/* Grid columns generator */

@each $n in $bits-grid-columns {
  .#{$bits-components-ns}Grid--#{$n}col {
    > .#{$bits-components-ns}Grid-cell {
      width: percentage(1 / $n);
    }
  }
}


/* Descendants modifiers
   ========================================================================== */

/**
 * Horizontally center one unit
 *
 * Set a specific unit to be horizontally centered. Doesn't affect
 * any other units. Can still contain a child `Grid` object.
 */

.#{$bits-components-ns}Grid-cell--center {
  display: block;
  margin: 0 auto;
}